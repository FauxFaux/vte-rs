// This file was generated by gir (0f7cd61) from gir-files (0bcaef9)
// DO NOT EDIT

use ffi;
use glib::Type;
use glib::StaticType;
use glib::value::{Value, SetValue, FromValue, FromValueOptional};
use gobject_ffi;
use glib::translate::*;

bitflags! {
    pub flags PtyFlags: u32 {
        const PTY_NO_LASTLOG = 1,
        const PTY_NO_UTMP = 2,
        const PTY_NO_WTMP = 4,
        const PTY_NO_HELPER = 8,
        const PTY_NO_FALLBACK = 16,
        const PTY_DEFAULT = 0,
    }
}

#[doc(hidden)]
impl ToGlib for PtyFlags {
    type GlibType = ffi::VtePtyFlags;

    fn to_glib(&self) -> ffi::VtePtyFlags {
        ffi::VtePtyFlags::from_bits_truncate(self.bits())
    }
}

#[doc(hidden)]
impl FromGlib<ffi::VtePtyFlags> for PtyFlags {
    fn from_glib(value: ffi::VtePtyFlags) -> PtyFlags {
        skip_assert_initialized!();
        PtyFlags::from_bits_truncate(value.bits())
    }
}

impl StaticType for PtyFlags {
    fn static_type() -> Type {
        Type::BaseFlags
    }
}

impl<'a> FromValueOptional<'a> for PtyFlags {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for PtyFlags {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(ffi::VtePtyFlags::from_bits_truncate(gobject_ffi::g_value_get_flags(value.to_glib_none().0)))
    }
}

impl SetValue for PtyFlags {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib().bits())
    }
}

